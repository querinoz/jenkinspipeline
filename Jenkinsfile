// Define a imagem base do Docker para o Jenkins Agent, se necess√°rio.
// Usamos 'agent any' pois a execu√ß√£o do Docker ser√° feita no host.
pipeline {
    agent any 

    // Configura√ß√£o do agendamento (Trigger) usando CRON.
    // O Jenkins CRON s√≥ suporta minutos, horas, dias, etc. Ele n√£o suporta segundos.
    // Para simular a execu√ß√£o "a cada 20 segundos", a melhor pr√°tica √© usar o agendamento
    // padr√£o para rodar a cada minuto, o que √© o intervalo m√≠nimo recomendado para pipelines.
    //
    // H/5 * * * * = Executa a cada 5 minutos (evita sobrecarga no Jenkins)
    // Se voc√™ realmente quer a cada minuto, use H * * * *
    triggers {
        // CRON para executar a cada minuto (o m√≠nimo suportado)
        // Se voc√™ n√£o definir a zona de tempo, ele usar√° a do servidor Jenkins.
        cron 'H * * * *'
    }

    environment {
        // Vari√°veis de ambiente para o Docker
        REPO_NAME = 'querinoz/website-check'
        IMAGE_NAME = "website-check-pipeline-app"
    }

    stages {
        stage('Checkout SCM') {
            steps {
                echo "üì• Obtendo c√≥digo do reposit√≥rio..."
                // O Jenkins faz o checkout automaticamente, mas √© bom ter o passo expl√≠cito.
                checkout scm 
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "üê≥ Construindo imagem Docker com Python e depend√™ncias..."
                // O websitecheck.py precisa de um ambiente Python. Constru√≠mos a imagem.
                // O Dockerfile deve estar na raiz do projeto.
                sh "docker build -t ${IMAGE_NAME} ."
            }
        }

        stage('Run WebsiteCheck') {
            steps {
                echo "‚ñ∂Ô∏è Executando checagem do site no container..."
                // Executa o script Python dentro do container rec√©m-constru√≠do.
                // O script websitecheck.py deve ser o ponto de entrada.
                sh "docker run --rm ${IMAGE_NAME}"
            }
        }
    }

    post {
        always {
            // Garante que containers antigos sejam limpos ap√≥s a execu√ß√£o.
            echo "üßπ Limpando containers e imagens n√£o utilizados..."
            sh 'docker container prune -f || true'
            // O '|| true' garante que a pipeline n√£o falhe caso o comando prune falhe.
        }
        success {
            echo '‚úÖ Pipeline conclu√≠da com sucesso. Site checado.'
        }
        failure {
            echo '‚ùå Pipeline falhou! Verifique os logs do Docker ou do script Python.'
        }
    }
}
